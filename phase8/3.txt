SELECT COUNT(*)
FROM quiz e, question p, quiz_record er
WHERE e.quizID = (SELECT quizID FROM quiz WHERE inTime = CURRENT_DATE) 
AND e.quizID = p.quizID
AND e.quizID = er.quizID;

--Possible execution plans--
--(quiz ✶ quiz_record) ✶ question
SELECT COUNT(*) 
FROM question p JOIN (quiz e JOIN quiz_record er ON e.quizID = er.quizID AND e.quizID = (SELECT quizID FROM quiz WHERE inTime = CURRENT_DATE))
            ON p.quizID = e.quizID;

--(question ✶ quiz) ✶ quiz_record
SELECT COUNT(*) 
FROM quiz_record er JOIN (question p JOIN quiz e ON p.quizID = e.quizID AND e.quizID = (SELECT quizID FROM quiz WHERE inTime = CURRENT_DATE))
            ON e.quizID = er.quizID;

--(question ✶ quiz_record) ✶ quiz
SELECT COUNT(*) 
FROM quiz e JOIN (question p JOIN quiz_record er)
            ON e.quizID = er.quizID AND p.quizID = e.quizID AND e.quizID = (SELECT quizID FROM quiz WHERE inTime = CURRENT_DATE);

--Join cardinalities--
(quiz ✶ quiz_record) ✶ question (0 + 0) = 0 tuples
--TIME FOR testQuery: 0.001999378204345703 seconds
(question ✶ quiz) ✶ quiz_record (0 + 0) = 0 tuples
--TIME FOR testQuery: 0.0020012855529785156 seconds
(question ✶ quiz_record) ✶ quiz (31516996 + 0) = 31516996 tuples
--TIME FOR testQuery: 0.002000570297241211 seconds

--because of here no datas selected here it won't take much time but we have also large data which can be implemented in couple of seconds
--Analyze 
--We decided that query 1 is the fastest and most efficient, although for passing tuples 1 and 2 of the same calculation time, query 1 wins.
